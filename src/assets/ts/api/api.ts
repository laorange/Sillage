// tslint:disable
/**
 * Sillage
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from "url";
import {Configuration} from "./configuration";
import globalAxios, {AxiosPromise, AxiosInstance} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError} from "./base";

/**
 *
 * @export
 * @interface Classroom
 */
export interface Classroom {
    /**
     *
     * @type {number}
     * @memberof Classroom
     */
    room_id: number;
    /**
     *
     * @type {string}
     * @memberof Classroom
     */
    name: string;
    /**
     *
     * @type {boolean}
     * @memberof Classroom
     */
    is_common: boolean;
}

/**
 *
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 主码
     * @type {number}
     * @memberof Course
     */
    course_id: number;
    /**
     * FK-CoursePlan
     * @type {number}
     * @memberof Course
     */
    plan: number;
    /**
     * FK-Classroom
     * @type {number}
     * @memberof Course
     */
    room: number | null;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    date: string;
    /**
     *
     * @type {number}
     * @memberof Course
     */
    which_lesson: number;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    note?: string | null;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    update_time?: string;
    /**
     * 例如：#FFFFFF
     * @type {string}
     * @memberof Course
     */
    color?: string;
    /**
     * 从2007.9算起的第?学期
     * @type {number}
     * @memberof Course
     */
    period?: number;
    /**
     * 从大一上算起的第?学期 ∈ [1,14]
     * @type {number}
     * @memberof Course
     */
    semester?: number;
    /**
     * 如CS21,ES22
     * @type {string}
     * @memberof Course
     */
    code?: string | null;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    ch_name?: string;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    en_name?: string | null;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    fr_name?: string | null;
    /**
     * Course/TD/TP/Exam
     * @type {string}
     * @memberof Course
     */
    method?: string;
    /**
     * 多对多，分组的id列表，但是字符串
     * @type {string}
     * @memberof Course
     */
    group_ids?: string | null;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    groups_name?: string | null;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    teacher_name?: string | null;
    /**
     *
     * @type {string}
     * @memberof Course
     */
    room_name?: string | null;
}

/**
 *
 * @export
 * @interface CourseChangeLog
 */
export interface CourseChangeLog {
    /**
     *
     * @type {number}
     * @memberof CourseChangeLog
     */
    log_id: number;
    /**
     * FK-CoursePlan
     * @type {number}
     * @memberof CourseChangeLog
     */
    plan: number;
    /**
     * 新增/更新/删除
     * @type {string}
     * @memberof CourseChangeLog
     */
    action: string;
    /**
     *
     * @type {string}
     * @memberof CourseChangeLog
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof CourseChangeLog
     */
    update_time?: string;
    /**
     *
     * @type {string}
     * @memberof CourseChangeLog
     */
    color?: string;
    /**
     * 从2007.9算起的第?学期
     * @type {number}
     * @memberof CourseChangeLog
     */
    period?: number;
    /**
     * 从大一上算起的第?学期 ∈ [1,14]
     * @type {number}
     * @memberof CourseChangeLog
     */
    semester?: number;
    /**
     * 如CS21,ES22
     * @type {string}
     * @memberof CourseChangeLog
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof CourseChangeLog
     */
    ch_name?: string;
    /**
     *
     * @type {string}
     * @memberof CourseChangeLog
     */
    en_name?: string;
    /**
     *
     * @type {string}
     * @memberof CourseChangeLog
     */
    fr_name?: string | null;
    /**
     * Course/TD/TP/Exam
     * @type {string}
     * @memberof CourseChangeLog
     */
    method?: string;
    /**
     * 多对多，分组的id列表，但是字符串
     * @type {string}
     * @memberof CourseChangeLog
     */
    group_ids?: string;
    /**
     *
     * @type {string}
     * @memberof CourseChangeLog
     */
    groups_name?: string | null;
    /**
     *
     * @type {string}
     * @memberof CourseChangeLog
     */
    teacher_name?: string | null;
}

/**
 *
 * @export
 * @interface Group
 */
export interface Group {
    /**
     *
     * @type {number}
     * @memberof Group
     */
    group_id: number;
    /**
     * 从2007.9算起的第?学期
     * @type {number}
     * @memberof Group
     */
    period: number;
    /**
     * 从大一上算起的第?学期 ∈ [1,14]
     * @type {number}
     * @memberof Group
     */
    semester: number;
    /**
     *
     * @type {string}
     * @memberof Group
     */
    name: string;
}

/**
 *
 * @export
 * @interface Notice
 */
export interface Notice {
    /**
     *
     * @type {number}
     * @memberof Notice
     */
    notice_id: number;
    /**
     *
     * @type {string}
     * @memberof Notice
     */
    label: string | null;
    /**
     *
     * @type {string}
     * @memberof Notice
     */
    content: string;
    /**
     * 广告位虚位以待
     * @type {string}
     * @memberof Notice
     */
    link: string | null;
    /**
     * 用于排序
     * @type {number}
     * @memberof Notice
     */
    priority: number;
    /**
     * 用于临时开关某些通知
     * @type {boolean}
     * @memberof Notice
     */
    validity: boolean;
    /**
     *
     * @type {string}
     * @memberof Notice
     */
    update_time: string;
}

/**
 *
 * @export
 * @interface SemesterConfig
 */
export interface SemesterConfig {
    /**
     * 从2007.9算起的第?学期
     * @type {number}
     * @memberof SemesterConfig
     */
    current_period: number;
    /**
     *
     * @type {string}
     * @memberof SemesterConfig
     */
    current_period_display?: string;
    /**
     *
     * @type {string}
     * @memberof SemesterConfig
     */
    week1_monday_date: string;
    /**
     *
     * @type {number}
     * @memberof SemesterConfig
     */
    max_week: number;
}

/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 教室信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiClassroomGet(options: any = {}): RequestArgs {
            const localVarPath = `/course/api/classroom/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 调课日志
         * @param {string} [after] 更新时间不晚于（为了避免消息过多，建议限定为3天内）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiCourseChangeLogGet(after?: string, options: any = {}): RequestArgs {
            const localVarPath = `/course/api/CourseChangeLog/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 排课记录
         * @summary 排课记录
         * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从&#x60;SemesterConfig&#x60;中请求到）
         * @param {string} [semester] 从大一上算起的第?学期 ∈ [1,14]
         * @param {string} [method] Course/TD/TP/Exam
         * @param {string} [date] 这节课的上课日期
         * @param {string} [week] 本学期的第?周
         * @param {string} [whatDay] 星期?, 1:Sunday, 2:Monday, Saturday:7
         * @param {string} [whichLesson] 第?节课，∈[1,5]
         * @param {string} [after] 上课时间不早于
         * @param {string} [before] 上课时间不晚于
         * @param {string} [updateAfter] 更新时间不早于
         * @param {string} [updateBefore] 更新时间不晚于
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiCourseGet(period: string, semester?: string, method?: string, date?: string, week?: string, whatDay?: string, whichLesson?: string, after?: string, before?: string, updateAfter?: string, updateBefore?: string, options: any = {}): RequestArgs {
            // verify required parameter 'period' is not null or undefined
            if (period === null || period === undefined) {
                throw new RequiredError("period", "Required parameter period was null or undefined when calling courseApiCourseGet.");
            }
            const localVarPath = `/course/api/course/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter["period"] = period;
            }

            if (semester !== undefined) {
                localVarQueryParameter["semester"] = semester;
            }

            if (method !== undefined) {
                localVarQueryParameter["method"] = method;
            }

            if (date !== undefined) {
                localVarQueryParameter["date"] = date;
            }

            if (week !== undefined) {
                localVarQueryParameter["week"] = week;
            }

            if (whatDay !== undefined) {
                localVarQueryParameter["what_day"] = whatDay;
            }

            if (whichLesson !== undefined) {
                localVarQueryParameter["which_lesson"] = whichLesson;
            }

            if (after !== undefined) {
                localVarQueryParameter["after"] = after;
            }

            if (before !== undefined) {
                localVarQueryParameter["before"] = before;
            }

            if (updateAfter !== undefined) {
                localVarQueryParameter["update_after"] = updateAfter;
            }

            if (updateBefore !== undefined) {
                localVarQueryParameter["update_before"] = updateBefore;
            }


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 一般用于需要用到全部分组信息的场景
         * @summary 分组名称
         * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从SemesterConfig中请求到）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiGroupGet(period: string, options: any = {}): RequestArgs {
            // verify required parameter 'period' is not null or undefined
            if (period === null || period === undefined) {
                throw new RequiredError("period", "Required parameter period was null or undefined when calling courseApiGroupGet.");
            }
            const localVarPath = `/course/api/group/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter["period"] = period;
            }

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 系统通知
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiNoticeGet(options: any = {}): RequestArgs {
            const localVarPath = `/course/api/notice/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 当前学期的信息： + 学期戳 + 学期戳的解释性文字 + 第一周周一的日期 + 本学期共计多少周
         * @summary 学期信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiSemesterConfig1Get(options: any = {}): RequestArgs {
            const localVarPath = `/course/api/semester-config/1/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: "GET", ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 教室信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiClassroomGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Classroom>> {
            const localVarAxiosArgs = CourseApiAxiosParamCreator(configuration).courseApiClassroomGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 调课日志
         * @param {string} [after] 更新时间不晚于（为了避免消息过多，建议限定为3天内）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiCourseChangeLogGet(after?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseChangeLog>> {
            const localVarAxiosArgs = CourseApiAxiosParamCreator(configuration).courseApiCourseChangeLogGet(after, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 排课记录
         * @summary 排课记录
         * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从&#x60;SemesterConfig&#x60;中请求到）
         * @param {string} [semester] 从大一上算起的第?学期 ∈ [1,14]
         * @param {string} [method] Course/TD/TP/Exam
         * @param {string} [date] 这节课的上课日期
         * @param {string} [week] 本学期的第?周
         * @param {string} [whatDay] 星期?, 1:Sunday, 2:Monday, Saturday:7
         * @param {string} [whichLesson] 第?节课，∈[1,5]
         * @param {string} [after] 上课时间不早于
         * @param {string} [before] 上课时间不晚于
         * @param {string} [updateAfter] 更新时间不早于
         * @param {string} [updateBefore] 更新时间不晚于
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiCourseGet(period: string, semester?: string, method?: string, date?: string, week?: string, whatDay?: string, whichLesson?: string, after?: string, before?: string, updateAfter?: string, updateBefore?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Course>> {
            const localVarAxiosArgs = CourseApiAxiosParamCreator(configuration).courseApiCourseGet(period, semester, method, date, week, whatDay, whichLesson, after, before, updateAfter, updateBefore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 一般用于需要用到全部分组信息的场景
         * @summary 分组名称
         * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从SemesterConfig中请求到）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiGroupGet(period: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>> {
            const localVarAxiosArgs = CourseApiAxiosParamCreator(configuration).courseApiGroupGet(period, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary 系统通知
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiNoticeGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Notice>> {
            const localVarAxiosArgs = CourseApiAxiosParamCreator(configuration).courseApiNoticeGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 当前学期的信息： + 学期戳 + 学期戳的解释性文字 + 第一周周一的日期 + 本学期共计多少周
         * @summary 学期信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiSemesterConfig1Get(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SemesterConfig> {
            const localVarAxiosArgs = CourseApiAxiosParamCreator(configuration).courseApiSemesterConfig1Get(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary 教室信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiClassroomGet(options?: any): AxiosPromise<Array<Classroom>> {
            return CourseApiFp(configuration).courseApiClassroomGet(options)(axios, basePath);
        },
        /**
         *
         * @summary 调课日志
         * @param {string} [after] 更新时间不晚于（为了避免消息过多，建议限定为3天内）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiCourseChangeLogGet(after?: string, options?: any): AxiosPromise<Array<CourseChangeLog>> {
            return CourseApiFp(configuration).courseApiCourseChangeLogGet(after, options)(axios, basePath);
        },
        /**
         * 排课记录
         * @summary 排课记录
         * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从&#x60;SemesterConfig&#x60;中请求到）
         * @param {string} [semester] 从大一上算起的第?学期 ∈ [1,14]
         * @param {string} [method] Course/TD/TP/Exam
         * @param {string} [date] 这节课的上课日期
         * @param {string} [week] 本学期的第?周
         * @param {string} [whatDay] 星期?, 1:Sunday, 2:Monday, Saturday:7
         * @param {string} [whichLesson] 第?节课，∈[1,5]
         * @param {string} [after] 上课时间不早于
         * @param {string} [before] 上课时间不晚于
         * @param {string} [updateAfter] 更新时间不早于
         * @param {string} [updateBefore] 更新时间不晚于
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiCourseGet(period: string, semester?: string, method?: string, date?: string, week?: string, whatDay?: string, whichLesson?: string, after?: string, before?: string, updateAfter?: string, updateBefore?: string, options?: any): AxiosPromise<Array<Course>> {
            return CourseApiFp(configuration).courseApiCourseGet(period, semester, method, date, week, whatDay, whichLesson, after, before, updateAfter, updateBefore, options)(axios, basePath);
        },
        /**
         * 一般用于需要用到全部分组信息的场景
         * @summary 分组名称
         * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从&#x60;SemesterConfig&#x60;中请求到）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiGroupGet(period: string, options?: any): AxiosPromise<Array<Group>> {
            return CourseApiFp(configuration).courseApiGroupGet(period, options)(axios, basePath);
        },
        /**
         *
         * @summary 系统通知
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiNoticeGet(options?: any): AxiosPromise<Array<Notice>> {
            return CourseApiFp(configuration).courseApiNoticeGet(options)(axios, basePath);
        },
        /**
         * 当前学期的信息： + 学期戳 + 学期戳的解释性文字 + 第一周周一的日期 + 本学期共计多少周
         * @summary 学期信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseApiSemesterConfig1Get(options?: any): AxiosPromise<SemesterConfig> {
            return CourseApiFp(configuration).courseApiSemesterConfig1Get(options)(axios, basePath);
        },
    };
};

/**
 * CourseApi - interface
 * @export
 * @interface CourseApi
 */
export interface CourseApiInterface {
    /**
     *
     * @summary 教室信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseApiClassroomGet(options?: any): AxiosPromise<Array<Classroom>>;

    /**
     *
     * @summary 调课日志
     * @param {string} [after] 更新时间不晚于（为了避免消息过多，建议限定为3天内）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseApiCourseChangeLogGet(after?: string, options?: any): AxiosPromise<Array<CourseChangeLog>>;

    /**
     * 排课记录
     * @summary 排课记录
     * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从&#x60;SemesterConfig&#x60;中请求到）
     * @param {string} [semester] 从大一上算起的第?学期 ∈ [1,14]
     * @param {string} [method] Course/TD/TP/Exam
     * @param {string} [date] 这节课的上课日期
     * @param {string} [week] 本学期的第?周
     * @param {string} [whatDay] 星期?, 1:Sunday, 2:Monday, Saturday:7
     * @param {string} [whichLesson] 第?节课，∈[1,5]
     * @param {string} [after] 上课时间不早于
     * @param {string} [before] 上课时间不晚于
     * @param {string} [updateAfter] 更新时间不早于
     * @param {string} [updateBefore] 更新时间不晚于
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseApiCourseGet(period: string, semester?: string, method?: string, date?: string, week?: string, whatDay?: string, whichLesson?: string, after?: string, before?: string, updateAfter?: string, updateBefore?: string, options?: any): AxiosPromise<Array<Course>>;

    /**
     * 一般用于需要用到全部分组信息的场景
     * @summary 分组名称
     * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从&#x60;SemesterConfig&#x60;中请求到）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseApiGroupGet(period: string, options?: any): AxiosPromise<Array<Group>>;

    /**
     *
     * @summary 系统通知
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseApiNoticeGet(options?: any): AxiosPromise<Array<Notice>>;

    /**
     * 当前学期的信息： + 学期戳 + 学期戳的解释性文字 + 第一周周一的日期 + 本学期共计多少周
     * @summary 学期信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApiInterface
     */
    courseApiSemesterConfigGet(options?: any): AxiosPromise<SemesterConfig>;

}

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI implements CourseApiInterface {
    /**
     *
     * @summary 教室信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public courseApiClassroomGet(options?: any) {
        return CourseApiFp(this.configuration).courseApiClassroomGet(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary 调课日志
     * @param {string} [after] 更新时间不晚于（为了避免消息过多，建议限定为3天内）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public courseApiCourseChangeLogGet(after?: string, options?: any) {
        return CourseApiFp(this.configuration).courseApiCourseChangeLogGet(after, options)(this.axios, this.basePath);
    }

    /**
     * 排课记录
     * @summary 排课记录
     * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从&#x60;SemesterConfig&#x60;中请求到）
     * @param {string} [semester] 从大一上算起的第?学期 ∈ [1,14]
     * @param {string} [method] Course/TD/TP/Exam
     * @param {string} [date] 这节课的上课日期
     * @param {string} [week] 本学期的第?周
     * @param {string} [whatDay] 星期?, 1:Sunday, 2:Monday, Saturday:7
     * @param {string} [whichLesson] 第?节课，∈[1,5]
     * @param {string} [after] 上课时间不早于
     * @param {string} [before] 上课时间不晚于
     * @param {string} [updateAfter] 更新时间不早于
     * @param {string} [updateBefore] 更新时间不晚于
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public courseApiCourseGet(period: string, semester?: string, method?: string, date?: string, week?: string, whatDay?: string, whichLesson?: string, after?: string, before?: string, updateAfter?: string, updateBefore?: string, options?: any) {
        return CourseApiFp(this.configuration).courseApiCourseGet(period, semester, method, date, week, whatDay, whichLesson, after, before, updateAfter, updateBefore, options)(this.axios, this.basePath);
    }

    /**
     * 一般用于需要用到全部分组信息的场景
     * @summary 分组名称
     * @param {string} period 学期戳，从2007.9算起的第?学期（可以根据时间自己算，也可以从&#x60;SemesterConfig&#x60;中请求到）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public courseApiGroupGet(period: string, options?: any) {
        return CourseApiFp(this.configuration).courseApiGroupGet(period, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary 系统通知
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public courseApiNoticeGet(options?: any) {
        return CourseApiFp(this.configuration).courseApiNoticeGet(options)(this.axios, this.basePath);
    }

    /**
     * 当前学期的信息： + 学期戳 + 学期戳的解释性文字 + 第一周周一的日期 + 本学期共计多少周
     * @summary 学期信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public courseApiSemesterConfigGet(options?: any) {
        return CourseApiFp(this.configuration).courseApiSemesterConfig1Get(options)(this.axios, this.basePath);
    }

}


